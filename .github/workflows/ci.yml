name: hugo-site-ci

on:  # yamllint disable-line rule:truthy
  - push

jobs:

  lint_scripts:
    name: Lint scripts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        severity: style

  lint_dockerfile:
    name: Lint
    needs: update_requirements
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@v1.1.0

  # unit_test:
  #   name: Unit test (Python ${{ matrix.python-version }})
  #   needs: update_requirements
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version:
  #         - "3.8"
  #         - "3.9"
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Download requirements.txt
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: requirements

  #     - name: Install
  #       run: pip install -r requirements.txt

  #     - name: Test
  #       run: ./test.sh

  # build:
  #   name: Build
  #   needs: update_requirements
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.9"

  #     - name: Download requirements.txt
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: requirements

  #     - name: Install
  #       run: pip install -r requirements.txt

  #     - name: Version
  #       run: echo "${GITHUB_REF##*/}" > corf/VERSION

  #     - name: Build
  #       run: ./build.sh

  #     - name: Archive distributable
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: distributable
  #         path: dist
  #         retention-days: 1

  # cli_test:
  #   name: CLI test (Python ${{ matrix.python-version }})
  #   needs: build
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version:
  #         - "3.8"
  #         - "3.9"
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Download build distributable
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: distributable

  #     - name: CLI test
  #       run: |
  #         # Install corf.
  #         pip install "$(ls *.whl)"

  #         # Run corf to get its version, and assert that it's what we expect.
  #         corf --version | tee version.tmp
  #         grep -qF "${GITHUB_REF##*/}" version.tmp

  #         # Set up environment variables for corf to authenticate with.
  #         export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
  #         export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"

  #         # Go into the magical directory.
  #         cd testing/sample_project

  #         # Create a Pipfile for this Python version.
  #         cp Pipfile.template Pipfile
  #         echo "python_version = \"${{ matrix.python-version }}\"" >> Pipfile

  #         # Install pipenv
  #         pip install --upgrade pip
  #         pip install pipenv

  #         # Assert that "tupper" is not yet installed, so we can later confirm
  #         # that we definitely pulled via an authorisation token.
  #         set +e
  #         pipenv run python -m tupper
  #         returned=$?
  #         set -e
  #         if [[ "${returned}" != "1" ]]; then
  #           echo "Expected tupper execution to fail gracefully: ${returned}"
  #           exit 1
  #         fi

  #         # Install our Pipfile (i.e. install "tupper") via "corf".
  #         corf pipenv install

  #         # Assert that we just pulled "tupper".
  #         pipenv run python -m tupper

  # publish:
  #   if: startsWith(github.ref, 'refs/tags')
  #   name: Publish
  #   needs: cli_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download build distributable
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: distributable

  #     - name: Create distributable directory
  #       run: |
  #         mkdir dist
  #         cp *.whl dist
  #         ls -al dist/

  #     - name: Publish
  #       uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_TOKEN }}





  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Build and push
  #       uses: docker/build-push-action@v1.1.0
  #       with:
  #         add_git_labels: true
  #         build_args: HUGO_VERSION=0.74.3
  #         labels: hugo=0.74.3
  #         username: cariad
  #         password: ${{ secrets.DOCKER_TOKEN }}
  #         repository: cariad/hugo-site-builder
  #         tag_with_ref: true
  #         tags: latest
